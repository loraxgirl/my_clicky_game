{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Navbar/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","setClicked","id","alt","name","src","image","Wrapper","children","Jumbotron","Navbar","score","topScore","clickMessage","App","state","friends","correctGuesses","_this","clickedMatch","filter","match","clicked","setState","i","length","console","log","sort","b","Math","random","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","friend","components_FriendCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"g/BAaeA,MAVf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCA1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,WCI1BC,SAJG,SAAAd,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBCMAW,SARA,SAAAf,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,kBAA2CJ,EAAMgB,MAAjD,kBAAuEhB,EAAMiB,UAC7EhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,EAAMkB,wBCsHvBC,oNA/GdC,MAAQ,CACPC,UACAH,aAAc,0GACRI,eAAgB,EAChBL,SAAU,KAGhBX,WAAa,SAAAC,GAGX,IAAMc,EAAUE,EAAKH,MAAMC,QAGrBG,EAAeH,EAAQI,OAAO,SAAAC,GAAK,OAAIA,EAAMnB,KAAOA,IAG1D,GAAIiB,EAAa,GAAGG,QAAQ,CACxBJ,EAAKK,SAAS,CAACN,eAAgB,EAAGJ,aAAc,0DAGhD,IAAK,IAAIW,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGF,SAAU,EAGzBJ,EAAKK,SAAS,CAACP,iBAGZ,GAAIE,EAAKH,MAAME,eAAiB,GAGnCE,EAAa,GAAGG,SAAU,EAG1BJ,EAAKK,SAAS,CACVN,eAAgBC,EAAKH,MAAME,eAAiB,EAC5CJ,aAAc,6DACd,WAAOa,QAAQC,IAAIT,EAAKH,MAAME,eAAgBC,EAAKH,MAAMH,UACrDM,EAAKH,MAAME,eAAiBC,EAAKH,MAAMH,WACvCc,QAAQC,IAAIT,EAAKH,MAAME,eAAgBC,EAAKH,MAAMH,UAClDM,EAAKK,SAAS,CACVX,SAAUM,EAAKH,MAAME,gBAEzB,kBAAMS,QAAQC,IAAIT,EAAKH,MAAME,eAAgBC,EAAKH,MAAMH,eAWhEI,EAAQY,KAAK,SAAS/B,EAAGgC,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKK,SAAS,CAAEP,gBAGb,CAGHG,EAAa,GAAGG,SAAU,EAG1BJ,EAAKK,SAAS,CACVN,eAAgB,EAChBJ,aAAc,qEACdD,SAAU,KAMd,IAAK,IAAIY,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGF,SAAU,EAIzBN,EAAQY,KAAK,SAAS/B,EAAGgC,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKK,SAAS,CAAEP,sFASd,IAAAgB,EAAAC,KACR,OACCrC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACoC,EAAD,CAAQvB,MAAOsB,KAAKlB,MAAME,eAAgBL,SAAUqB,KAAKlB,MAAMH,SAAUC,aAAcoB,KAAKlB,MAAMF,eAClGjB,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,KACEH,KAAKlB,MAAMC,QAAQqB,IAAI,SAAAC,GAAM,OAC7B1C,EAAAC,EAAAC,cAACyC,EAAD,CACCrC,GAAIoC,EAAOpC,GACXsC,IAAKF,EAAOpC,GACZI,MAAOgC,EAAOhC,MACdL,WAAY+B,EAAK/B,wBAxGNwC,oBCPlBC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.9fa36fb9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.setClicked(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","\nimport React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = props => (\n<div className=\"jumbotron\"></div>\n);\n\nexport default Jumbotron;","import React from \"react\"\nimport \"./style.css\";\n\nconst Navbar = props => (\n<nav className=\"navbar sticky-top\">\n<h2 className=\"scoreBoard\">Current Score: {props.score}    Top Score: {props.topScore}</h2>\n<hr />\n    <h3 className=\"scoreBoard\">{props.clickMessage}</h3>\n</nav>\n)\n\nexport default Navbar;","import React, { Component } from 'react';\nimport FriendCard from './components/FriendCard';\nimport Wrapper from './components/Wrapper';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport friends from './friends.json';\nimport './App.css';\n\n// let correctGuesses = 0;\n// let topScore = 0;\n// let clickMessage = \"Click on an image to earn points, but don't click on any of them more than once!\";\n\nclass App extends Component {\n\t// Set this.state\n\tstate = {\n\t\tfriends,\n\t\tclickMessage: \"Click each minion once.  A unique click earns a point, but clicking any image more than once is a loss!\",\n        correctGuesses: 0,\n        topScore: 0\n\t};\n\n  setClicked = id => {\n\n    // Make a copy of the state friends array to work with\n    const friends = this.state.friends;\n\n    // Filter for the clicked match\n    const clickedMatch = friends.filter(match => match.id === id);\n\n    // If the matched image's clicked value is already true, game over\n    if (clickedMatch[0].clicked){\n        this.setState({correctGuesses: 0, clickMessage: \"UH-OH! You already clicked on that minion! Try again!\"});\n        \n\n        for (let i = 0 ; i < friends.length ; i++){\n            friends[i].clicked = false;\n        }\n\n        this.setState({friends});\n\n    // Otherwise, if clicked = false, and the user hasn't finished\n    } else if (this.state.correctGuesses < 11) {\n\n        // Set its value to true\n        clickedMatch[0].clicked = true;\n        \n        // increment the appropriate counter\n        this.setState({\n            correctGuesses: this.state.correctGuesses + 1, \n            clickMessage: \"Nice! You had not clicked on that one before! Keep going!\"},\n            () => {console.log(this.state.correctGuesses, this.state.topScore)\n            if (this.state.correctGuesses > this.state.topScore){\n                console.log(this.state.correctGuesses, this.state.topScore)\n                this.setState({\n                    topScore: this.state.correctGuesses\n                },\n                () => console.log(this.state.correctGuesses, this.state.topScore)\n                );\n            }\n            }\n            \n            );\n        \n\n        \n\n        // Shuffle the array to be rendered in a random order\n        friends.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.friends equal to the new friends array\n        this.setState({ friends });\n        // this.setState({correctGuesses});\n        // this.setState({clickMessage});\n    } else {\n\n        // Set its value to true\n        clickedMatch[0].clicked = true;\n\n        // restart the guess counter\n        this.setState({\n            correctGuesses: 0,\n            clickMessage: \"WOO-HOO!! You got ALL of them!!! Let's see if you can do it again!\",\n            topScore: 12\n        });\n\n        // Egg on the user to play again\n        // this.setState({ topScore });\n        \n        for (let i = 0 ; i < friends.length ; i++){\n            friends[i].clicked = false;\n        }\n\n        // Shuffle the array to be rendered in a random order\n        friends.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.friends equal to the new friends array\n        this.setState({ friends });\n        // this.setState({correctGuesses});\n        // this.setState({clickMessage});\n\n    }\n};\n\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar score={this.state.correctGuesses} topScore={this.state.topScore} clickMessage={this.state.clickMessage} />\n\t\t\t\t<Jumbotron />\n\t\t\t\t<Wrapper>\n\t\t\t\t\t{this.state.friends.map(friend => (\n\t\t\t\t\t\t<FriendCard\n\t\t\t\t\t\t\tid={friend.id}\n\t\t\t\t\t\t\tkey={friend.id}\n\t\t\t\t\t\t\timage={friend.image}\n\t\t\t\t\t\t\tsetClicked={this.setClicked}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</Wrapper>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}